/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Splash.java
 *
 * Created on 22-dic-2011, 20:51:25
 */

package Utilidades;

import javax.swing.SwingUtilities;

/**
 *  Esta clase sera la que contenga la ventana splah al iniciar el programa
 * @author JuanPaulo
 */
public class Splash extends javax.swing.JDialog {

    /** Creates new form Splash */
    public Splash(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();

        Utilidades.centrar(this);
        this.setVisible(true);

    }
     /**Metodo que actualiza el estado de la barra de progreso y la etiqueta de
     * esta. Uilizamos el metodo invokeLater para hacer que dicha actualizacion
     * se ejecute desde el EDT (Event Dispatch Thread) para que sea seguro
     * con respecto a las hebras.
     * @param estado int
     * @param etiqueta String
     */
    public void actualizaEstado(int estado, String etiqueta){
        try {
            final int fEstado = estado;
            final String fEtiqueta = etiqueta;
            final Runnable trabajo = new Runnable() {
                    public void run() {
                        //
                        if (fEtiqueta != null)
                            jpbSplash.setString(fEtiqueta);
                            jpbSplash.setValue(fEstado);
                        }
            };
            SwingUtilities.invokeLater(trabajo);
        } catch (Exception ex)
        {
            ex.printStackTrace();
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPSplash = new javax.swing.JPanel();
        jlSplash = new javax.swing.JLabel();
        jPBarraProgreso = new javax.swing.JPanel();
        jpbSplash = new javax.swing.JProgressBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setAlwaysOnTop(true);
        setResizable(false);
        setUndecorated(true);

        jPSplash.setLayout(new javax.swing.BoxLayout(jPSplash, javax.swing.BoxLayout.LINE_AXIS));

        jlSplash.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Recursos/Imagenes/Splash2.png"))); // NOI18N
        jlSplash.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPSplash.add(jlSplash);

        getContentPane().add(jPSplash, java.awt.BorderLayout.CENTER);

        jPBarraProgreso.setLayout(new java.awt.BorderLayout());

        jpbSplash.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jpbSplash.setPreferredSize(new java.awt.Dimension(146, 25));
        jpbSplash.setStringPainted(true);
        jPBarraProgreso.add(jpbSplash, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPBarraProgreso, java.awt.BorderLayout.SOUTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                Splash dialog = new Splash(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPBarraProgreso;
    private javax.swing.JPanel jPSplash;
    private javax.swing.JLabel jlSplash;
    private javax.swing.JProgressBar jpbSplash;
    // End of variables declaration//GEN-END:variables

}
